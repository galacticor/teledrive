version: '3'

services:

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./letsencrypt:/etc/letsencrypt
      - ./certbot:/var/www/certbot
      - ./html:/usr/share/nginx/html
    depends_on:
      # - certbot
      - teledrive

  teledrive:
    command: bash -c "(yarn api prisma migrate deploy || yarn api prisma migrate resolve --applied 20220420012853_init) && node api/dist/index.js"
    labels:
      traefik.http.routers.server.rule: Host(`teledrive.localhost`)
      traefik.port: 4000
    ports:
      - "${PORT:-4000}:${PORT:-4000}"
    expose:
      - ${PORT:-4000}
    build:
      context: ../.
      dockerfile: Dockerfile
      args:
        REACT_APP_TG_API_ID: ${TG_API_ID}
        REACT_APP_TG_API_HASH: ${TG_API_HASH}
    environment:
      DATABASE_URL: postgres://postgres:${DB_PASS}@${DB_HOST}:5432/${DB_NAME}?connect_timeout=60&pool_timeout=60&socket_timeout=60
      REDIS_URI: redis://redis:6379
    env_file:
      - .env
    depends_on:
      # - db
      - redis
    restart: unless-stopped

  # db:
  #   image: postgres:13
  #   restart: always
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: ${DB_PASSWORD}
  #     POSTGRES_DB: teledrive
  #   volumes:
  #     - teledrive_data:/var/lib/postgresql/data

  # certbot:
  #   image: certbot/certbot
  #   container_name: certbot
  #   restart: unless-stopped
  #   volumes:
  #     - ./letsencrypt:/etc/letsencrypt
  #     - ./certbot:/var/www/certbot
  #   command: certonly --webroot --webroot-path=/var/www/certbot --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email -d ${CERTBOT_DOMAIN} -d www.${CERTBOT_DOMAIN}
  #   env_file:
  #     - .env


  redis:
    image: redis:6
    restart: always

volumes:
  teledrive_data:
